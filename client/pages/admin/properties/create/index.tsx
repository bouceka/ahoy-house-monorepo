// @flow
import * as React from 'react';
import { AdminNav } from '../../../../components/admin-nav/admin-nav.component';
import Head from 'next/head';
import { Action } from '../../../../components/action/action.component';
import { Input } from '../../../../components/input/input.component';
import { Formik } from 'formik';
import * as yup from 'yup';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useMutation } from '@apollo/client';
import { CREATE_PROPERTY } from '../../../../apollo/property-queries';

type Props = {};

const initialValue = {
  description: '',
  numberBaths: 0,
  numberRooms: 0,
  name: '',
  livingArea: 0,
  postalCode: '',
  address: '',
  isActive: true,
};

const validationSchema = yup.object().shape({
  name: yup.string().required('Name of the property is required'),
  description: yup.string().required('Description is required'),
  numberBaths: yup.number().required('Number of bathrooms is required'),
  numberRooms: yup.number().required('Number of bedrooms is required'),
  livingArea: yup.number().required('Size is required'),
  address: yup.string().required('Address is required'),
  postalCode: yup.string().required('Post code is required'),
});

const AddProperty = (props: Props) => {
  const [createProperty, { data, loading, error }] = useMutation(CREATE_PROPERTY);
  console.log(data);
  console.log(loading);
  console.log(error);

  const submitForm = async (values: typeof initialValue) => {
    const { data } = await createProperty({
      variables: {
        description: values.description,
        numberBaths: values.numberBaths,
        name: values.name,
        numberRooms: values.numberRooms,
        livingArea: values.livingArea,
        postalCode: values.postalCode,
        address: values.address,
        isActive: values.isActive,
      },
    });
    return data;
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <AdminNav />
      <main className='page '>
        <ToastContainer style={{ fontSize: '1.6rem' }} pauseOnHover hideProgressBar />
        <div className='row'>
          <h1 className='heading'>Add Property</h1>

          <Formik
            initialValues={initialValue}
            validationSchema={validationSchema}
            onSubmit={async (values, actions) => {
              try {
                console.log(values);

                console.log(await submitForm(values));
                toast.success('Form submitted');
                // actions.resetForm();
              } catch (error) {
                console.log(values);
                toast.error('Submission failed');
                // actions.resetForm();
              }
            }}
          >
            {({ values, handleSubmit, handleChange, isSubmitting, dirty, isValid, errors, ...props }) => {
              return (
                <>
                  <form onSubmit={handleSubmit}>
                    <Input
                      onChange={handleChange}
                      value={values.name}
                      required
                      name='name'
                      label='Property Name'
                      placeholder='e.g. Silver House'
                    />
                    <Input
                      onChange={handleChange}
                      value={values.description}
                      required
                      name='description'
                      type='textarea'
                      label='Description'
                      placeholder='Describe the property'
                    />
                    <Input
                      onChange={handleChange}
                      value={values.numberBaths}
                      required
                      name='numberBaths'
                      type='number'
                      label='Number of bathrooms'
                      placeholder='e.g. 1'
                    />
                    <Input
                      onChange={handleChange}
                      value={values.numberRooms}
                      required
                      name='numberRooms'
                      type='number'
                      label='Number of bedrooms'
                      placeholder='e.g. 1'
                    />
                    <Input
                      onChange={handleChange}
                      value={values.livingArea}
                      required
                      name='livingArea'
                      type='number'
                      label='Living Area (sqft) '
                      placeholder='e.g. 981'
                    />
                    <Input
                      onChange={handleChange}
                      value={values.address}
                      required
                      name='address'
                      label='Address'
                      placeholder='e.g. 1234 56 Ave, Vancouver, BC'
                    />
                    <Input
                      onChange={handleChange}
                      value={values.postalCode}
                      required
                      name='postalCode'
                      label='Postal Code'
                      placeholder='e.g. V6M 5T1'
                    />
                    <Input
                      onChange={() => props.setFieldValue('isActive', !values.isActive)}
                      checked={values.isActive}
                      type='checkbox'
                      name='active'
                      label='Is Property Active?'
                    />
                    <Action disabled={!isValid || !dirty} as='button' type='submit' styleType='primary'>
                      Submit
                    </Action>
                  </form>
                </>
              );
            }}
          </Formik>
        </div>
      </main>
    </>
  );
};

export default AddProperty;
