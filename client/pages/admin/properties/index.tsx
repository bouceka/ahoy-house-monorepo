// @flow
import Head from 'next/head';
import * as React from 'react';
import { AdminNav } from '../../../components/admin-nav/admin-nav.component';
import { Property } from '../../../types/property';
import { GetStaticProps } from 'next';
import { apolloClient } from '../../../utils/apollo-client';
import { DELETE_PROPERTY, GET_ALL_PROPERTIES } from '../../../apollo/property-queries';
import { AdminTable } from '../../../components/admin-table/admin-table.component';
import { useMutation } from '@apollo/client';
import { useRouter } from 'next/router';
import { useState } from 'react';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { Action } from '../../../components/action/action.component';

interface Props {
  properties: Property[];
}

export const getStaticProps: GetStaticProps<Props> = async () => {
  const { data } = await apolloClient.query({
    query: GET_ALL_PROPERTIES,
  });

  return {
    props: {
      properties: data.getAllProperties,
    },
  };
};

const AdminProperties = ({ properties, ...props }: Props) => {
  const [deleteProperty, { data, loading, error }] = useMutation(DELETE_PROPERTY);
  const [propertyList, setPropertyList] = useState(properties);
  const router = useRouter();
  const handleDeleteProperty = async (id: string) => {
    const { data } = await deleteProperty({
      variables: {
        id,
      },
    });
    if (!error) {
      toast.success('Property deleted');
      setPropertyList((properties) => properties.filter((property) => id !== property.id));
    }
  };

  const handleEdit = (id: string) => router.push(`/admin/properties/${id}/edit`);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <AdminNav />
      <ToastContainer style={{ fontSize: '1.6rem' }} pauseOnHover hideProgressBar />
      <main className='page '>
        <div className='row'>
          <h1 className='heading'>Properties</h1>
          <Action styleType='outline' as='link' href={`/admin/properties/create`}>
            Add Property
          </Action>
          <AdminTable
            data={propertyList}
            propertyList={['name', 'isActive', 'livingArea', 'address','rooms', 'edit']}
            th={['#', 'Name of Property', 'Is Active', 'Living Area', 'Address','No. Rooms', 'Edit']}
            handleDelete={handleDeleteProperty}
            handleEdit={(id: string) => handleEdit(id)}
          />
        </div>
      </main>
    </>
  );
};

export default AdminProperties;
