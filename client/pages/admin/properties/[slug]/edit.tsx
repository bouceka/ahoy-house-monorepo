// @flow
import { GetStaticPaths, GetStaticPropsContext } from 'next';
import * as React from 'react';
import {
  UPDATE_PROPERTY,
  fetchProperties,
  fetchProperty,
} from '../../../../apollo/property-queries';
import { Property } from '../../../../types/property';
import * as yup from 'yup';
import { useMutation } from '@apollo/client';
import Head from 'next/head';
import { AdminNav } from '../../../../components/admin-nav/admin-nav.component';
import { AdminTable } from '../../../../components/admin-table/admin-table.component';
import { Input } from '../../../../components/input/input.component';
import { Action } from '../../../../components/action/action.component';
import { Formik } from 'formik';
import { ToastContainer, toast } from 'react-toastify';
import { useRouter } from 'next/router';
import { useState } from 'react';
import { DELETE_ROOM } from '../../../../apollo/room-queries';
import 'react-toastify/dist/ReactToastify.css';
import { UploadImage } from '../../../../components/upload-image/upload-image.component';
import { DELETE_IMAGE } from '../../../../apollo/image.quries';

type Props = {
  property: Property;
};

export const getStaticProps = async ({ params }: GetStaticPropsContext<{ slug: string }>) => {
  const data = params?.slug ? await fetchProperty(params?.slug) : '';
  return {
    props: {
      property: data ? data.getProperty : [],
    },
  };
};

export const getStaticPaths: GetStaticPaths = async () => {
  const properties: Property[] = await fetchProperties();
  const paths = properties.map((property) => {
    return {
      params: {
        slug: property.id,
      },
    };
  });
  return {
    paths,
    fallback: false,
  };
};

const validationSchema = yup.object().shape({
  name: yup.string().required('Name of the property is required'),
  description: yup.string().required('Description is required'),
  numberBaths: yup.number().required('Number of bathrooms is required'),
  numberRooms: yup.number().required('Number of bedrooms is required'),
  livingArea: yup.number().required('Size is required'),
  address: yup.string().required('Address is required'),
  postalCode: yup.string().required('Post code is required'),
});

const EditProperty = ({ property }: Props) => {
  const [updateProperty] = useMutation(UPDATE_PROPERTY);
  const [deleteRoom] = useMutation(DELETE_ROOM);
  const [deleteImage] = useMutation(DELETE_IMAGE);
  const [roomList, setRoomList] = useState(property.rooms);

  const [imageList, setImageList] = useState(property.images);
  const router = useRouter();
  const initialValue = {
    description: property.description,
    numberBaths: property.numberBaths,
    numberRooms: property.numberRooms,
    name: property.name,
    livingArea: property.livingArea,
    postalCode: property.postalCode,
    address: property.address,
    isActive: property.isActive,
  };

  const handleDeleteRoom = async (id: string) => {
    const { data, errors } = await deleteRoom({
      variables: {
        id,
      },
    });
    if (!errors) {
      toast.success('Room deleted');
      setRoomList((rooms) => rooms.filter((room) => id !== room.id));
    }
  };
  const handleDeleteImage = async (id: string) => {
    const { data, errors } = await deleteImage({
      variables: {
        id,
      },
    });
    if (!errors) {
      toast.success('Image deleted');
      setImageList((image) => image.filter((image) => id !== image.id));
    }
  };

  const handleEdit = (roomId: string) => router.push(`/admin/rooms/${roomId}/edit`);

  const submitForm = async (values: typeof initialValue) => {

    const { data } = await updateProperty({
      variables: {
        description: values.description,
        numberBaths: values.numberBaths,
        name: values.name,
        numberRooms: values.numberRooms,
        livingArea: values.livingArea,
        postalCode: values.postalCode,
        address: values.address,
        isActive: values.isActive,
        id: property.id,
      },
    });
    return data;
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <AdminNav />
      <ToastContainer style={{ fontSize: '1.6rem' }} pauseOnHover hideProgressBar />
      <main className='page '>
        <div className='row'>
          <h1 className='heading'>Edit Property</h1>

          <Formik
            initialValues={initialValue}
            validationSchema={validationSchema}
            onSubmit={async (values, actions) => {
              try {
                await submitForm(values);
                toast.success('Form submitted');
              } catch (error) {
                console.log(values);
                toast.error('Submission failed');
              }
            }}
          >
            {({ values, handleSubmit, handleChange, isSubmitting, dirty, isValid, errors, ...props }) => {
              return (
                <>
                  <form onSubmit={handleSubmit}>
                    <Input
                      onChange={handleChange}
                      value={values.name}
                      required
                      name='name'
                      label='Property Name'
                      placeholder='e.g. Silver House'
                    />
                    <Input
                      onChange={handleChange}
                      value={values.description}
                      required
                      name='description'
                      type='textarea'
                      label='Description'
                      placeholder='Describe the property'
                    />
                    <Input
                      onChange={handleChange}
                      value={values.numberBaths}
                      required
                      name='numberBaths'
                      type='number'
                      label='Number of bathrooms'
                      placeholder='e.g. 1'
                    />
                    <Input
                      onChange={handleChange}
                      value={values.numberRooms}
                      required
                      name='numberRooms'
                      type='number'
                      label='Number of bedrooms'
                      placeholder='e.g. 1'
                    />
                    <Input
                      onChange={handleChange}
                      value={values.livingArea}
                      required
                      name='livingArea'
                      type='number'
                      label='Living Area (sqft) '
                      placeholder='e.g. 981'
                    />
                    <Input
                      onChange={handleChange}
                      value={values.address}
                      required
                      name='address'
                      label='Address'
                      placeholder='e.g. 1234 56 Ave, Vancouver, BC'
                    />
                    <Input
                      onChange={handleChange}
                      value={values.postalCode}
                      required
                      name='postalCode'
                      label='Postal Code'
                      placeholder='e.g. V6M 5T1'
                    />
                    <Input
                      onChange={() => props.setFieldValue('isActive', !values.isActive)}
                      checked={values.isActive}
                      type='checkbox'
                      name='active'
                      label='Is Property Active?'
                    />
                    <Action disabled={!isValid || !dirty} as='button' type='submit' styleType='primary'>
                      Submit
                    </Action>
                  </form>
                </>
              );
            }}
          </Formik>
          <Action styleType='outline' as='link' href={`/admin/rooms/create/${property.id}`}>
            Add Room
          </Action>
          <AdminTable
            th={['#', 'Name of Room', 'Price Per Night', 'Living Area', 'Capacity', 'Edit']}
            propertyList={['name', 'pricePerNight', 'livingArea', 'capacity', 'edit']}
            data={roomList}
            handleDelete={handleDeleteRoom}
            handleEdit={(id: string) => handleEdit(id)}
          />
          <UploadImage propertyId={property.id} />
          <AdminTable
            th={['#', 'Image Preview', 'URL', 'Edit']}
            propertyList={['image', 'url', 'edit']}
            data={imageList}
            handleDelete={handleDeleteImage}
            handleEdit={(id: string) => handleEdit(id)}
            isEditable={false}
          />
        </div>
      </main>
    </>
  );
};

export default EditProperty;
